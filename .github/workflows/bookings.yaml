name: Kong CI/CD Workflow

on:
  push:
    branches:
      - main  # You can specify which branches to trigger on

env:
  DECK_API_NAME: "bookings"
  DECK_KONG_DEPLOYMENT: "dev"
  KONNECT_ADDR: https://us.api.konghq.com
  KONNECT_CONTROL_PLANE_NAME: "On Premise Hybrid Control Plane"
  KONNECT_TOKEN: kpat_ct0GEm09jMtlwvPfkqxOfe38TgZ80VdOU4kfVQBBb48AHaZi1

jobs:

# LINTING
# BREAKING CHANGES

  query-db-for-service-exposure-1:
    runs-on: self-hosted

    env:  # Store environment variables at the job level
      PGHOST: postgres.pve-1.schenkeveld.io
      PGPORT: 5432
      PGUSER: github-actions-runner
      PGPASSWORD: github-actions-runner
      PGDATABASE: service-exposure-catalog

    steps:
      - name: Query PostgreSQL
        run: |
          # Run query and store output
          RESULT=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -At -F ',' -c "SELECT service, dp_namespace, env FROM catalog WHERE service = '$DECK_API_NAME';")
          
          # Check if result is empty
          if [ -z "$RESULT" ]; then
            echo "No results found. Stopping workflow."
            exit 1
          fi

  generate_kong_config:
    runs-on: self-hosted
    needs: query-db-for-service-exposure-1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate Kong Config
        run: |
          echo $GITHUB_SHA
          deck file openapi2kong -s $DECK_API_NAME/api/openapi-spec/openapi.yaml > $DECK_API_NAME/api/deck-file/generated/kong-generated.yaml

      - name: Upload Kong Generated Config
        uses: actions/upload-artifact@v4
        with:
          name: kong-generated.yaml
          path: ${{ env.DECK_API_NAME }}/api/deck-file/generated/kong-generated.yaml

  plugin_and_patch_kong_config:
    runs-on: self-hosted
    needs: generate_kong_config
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

        # ssh-keyscan -H github.com >> ~/.ssh/known_hosts     I CONSIDER THIS WORKER PREPARATION

      - name: Clone kong-air-common repository
        run: git clone git@github.com:maschenkeveld/kong-air-common.git

      - name: Download Kong Generated Config
        uses: actions/download-artifact@v4
        with:
          name: kong-generated.yaml
          path: ${{ env.DECK_API_NAME }}/api/deck-file/generated

      - name: Setup Environment Variables
        run: source $DECK_API_NAME/api/env-vars/env-vars

      - name: Patch Kong Config with Plugins
        run: |
          cat $DECK_API_NAME/api/deck-file/generated/kong-generated.yaml | deck file add-plugins -s - $DECK_API_NAME/api/plugins/plugins.yaml | deck file patch -s - kong-air-common/patches/patches.yaml | deck file patch -s - $DECK_API_NAME/api/patches/patches.yaml | deck file add-tags -s - $DECK_API_NAME > $DECK_API_NAME/api/deck-file/generated/kong-plugined-and-patched.yaml
          cat $DECK_API_NAME/api/deck-file/generated/kong-plugined-and-patched.yaml

      - name: Upload Kong Plugined and Patched Config
        uses: actions/upload-artifact@v4
        with:
          name: kong-plugined-and-patched.yaml
          path: ${{ env.DECK_API_NAME }}/api/deck-file/generated/kong-plugined-and-patched.yaml

  # diff:
  #   runs-on: self-hosted
  #   needs: plugin_and_patch_kong_config
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Clone kong-air-common repository
  #       run: git clone git@github.com:maschenkeveld/kong-air-common.git

  #     - name: Download Kong Patched Config
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: kong-plugined-and-patched.yaml
  #         path: ${{ env.DECK_API_NAME }}/api/deck-file/generated

  #     - name: Setup Environment Variables
  #       run: source ${{ env.DECK_API_NAME }}/api/env-vars/env-vars

  #     - name: Diff Kong Config
  #       run: |
  #         source $DECK_API_NAME/api/env-vars/env-vars
  #         deck gateway diff $DECK_API_NAME/api/deck-file/generated/kong-plugined-and-patched.yaml kong-air-common/plugin-templates/default-jwt.yaml --konnect-addr $KONNECT_ADDR --konnect-control-plane-name "$KONNECT_CONTROL_PLANE_NAME" --konnect-token $KONNECT_TOKEN --select-tag $DECK_API_NAME --select-tag $DECK_OWNER


  render_kong_config:
    runs-on: self-hosted
    needs: plugin_and_patch_kong_config
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clone kong-air-common repository
        run: git clone git@github.com:maschenkeveld/kong-air-common.git

      - name: Download Kong Patched Config
        uses: actions/download-artifact@v4
        with:
          name: kong-plugined-and-patched.yaml
          path: ${{ env.DECK_API_NAME }}/api/deck-file/generated

      - name: Setup Environment Variables
        run: source ${{ env.DECK_API_NAME }}/api/env-vars/env-vars

      - name: Render Kong Config
        run: |
          source $DECK_API_NAME/api/env-vars/env-vars
          deck file render $DECK_API_NAME/api/deck-file/generated/kong-plugined-and-patched.yaml kong-air-common/plugin-templates/default-jwt.yaml >  $DECK_API_NAME/api/deck-file/generated/kong-rendered.yaml

      - name: Upload Kong Rendered Config
        uses: actions/upload-artifact@v4
        with:
          name: kong-rendered.yaml
          path: ${{ env.DECK_API_NAME }}/api/deck-file/generated/kong-rendered.yaml

  kong2kic:
    runs-on: self-hosted
    needs: render_kong_config
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Kong Rendered Config
        uses: actions/download-artifact@v4
        with:
          name: kong-rendered.yaml
          path: ${{ env.DECK_API_NAME }}/api/deck-file/generated

      - name: Setup Environment Variables
        run: source ${{ env.DECK_API_NAME }}/api/env-vars/env-vars

      - name: kong2kic Kong Config
        run: |
          source $DECK_API_NAME/api/env-vars/env-vars
          deck file kong2kic -s $DECK_API_NAME/api/deck-file/generated/kong-rendered.yaml -o $DECK_API_NAME/api/deck-file/generated/k8s.yaml

      - name: Send prompt to Ollama API using Bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          API_URL="http://10.22.0.98:11434/v1/chat/completions"
          
          PROMPT="Can you transform these Kong KIC manifests: $(cat $DECK_API_NAME/api/deck-file/generated/k8s.yaml) into Kong Gateway Operator manifests like these examples: $(cat .github/gwo-examples.yaml) YAML manifests? Please only output the transformed YAML manifests as a single file, divided by --- dividers."

          ESCAPED_PROMPT=$(echo $PROMPT | jq -R @json)

          echo "Ollama Prompt: $PROMPT"

          echo "Ollama Escaped Prompt: $ESCAPED_PROMPT"

          RESPONSE=$(curl http://10.22.0.98:11434/v1/chat/completions \
              -H "Content-Type: application/json" \
              -d "{\"model\": \"llama3.2\", \"messages\": [{\"role\": \"user\", \"content\": $ESCAPED_PROMPT }]}")


          echo "Ollama Response: $RESPONSE"

          # Extract the generated text from the API response
          GENERATED_TEXT=$(echo $RESPONSE | jq -r '.choices[0].message.content')

          # Print the response
          echo "Ollama Response: $GENERATED_TEXT"

          echo  $GENERATED_TEXT > $DECK_API_NAME/api/deck-file/generated/k8s_tranformed.yaml


      # - name: Split Kubernetes YAML
      #   run: |
      #     # Define the file path
      #     FILE_PATH="${{ env.DECK_API_NAME }}/api/deck-file/generated/k8s.yaml"
      #     OUTPUT_DIR="${{ env.DECK_API_NAME }}/api/deck-file/generated/split_manifests"

      #     # Check if the file exists
      #     if [[ ! -f "$FILE_PATH" ]]; then
      #       echo "Error: $FILE_PATH does not exist. Stopping workflow."
      #       exit 1
      #     fi

      #     # Create the output directory
      #     mkdir -p "$OUTPUT_DIR"

      #     # Split the YAML file at "---" dividers
      #     csplit --quiet --prefix="$OUTPUT_DIR/manifest" "$FILE_PATH" '/^---$/' '{*}'

      #     # Iterate over split files and rename them
      #     for file in "$OUTPUT_DIR"/manifest*; do
      #       kind=$(yq e '.kind' "$file")
      #       name=$(yq e '.metadata.name' "$file")

      #       # Ensure both kind and name are present before renaming
      #       if [[ -n "$kind" && -n "$name" ]]; then
      #         new_filename="$OUTPUT_DIR/${kind}_${name}.yaml"
      #         mv "$file" "$new_filename"
      #         echo "Created $new_filename"
      #       else
      #         echo "Skipping file: $file (Missing kind or name)"
      #       fi
      #     done

      # - name: Upload Split YAMLs as Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: split-k8s-manifests
      #     path: ${{ env.DECK_API_NAME }}/api/deck-file/generated/split_manifests/*.yaml

  query-db-for-service-exposure-2:
    runs-on: self-hosted
    needs: kong2kic

    env:  # Store environment variables at the job level
      PGHOST: postgres.pve-1.schenkeveld.io
      PGPORT: 5432
      PGUSER: github-actions-runner
      PGPASSWORD: github-actions-runner
      PGDATABASE: service-exposure-catalog

    steps:
      - name: Query PostgreSQL
        run: |
          # Run query and store output
          RESULT=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -At -F ',' -c "SELECT service, dp_namespace, env FROM catalog WHERE service = '$DECK_API_NAME';")
          
        #    echo "Processing service: $service"
        #     echo "Namespace: $dp_namespace"
        #     echo "Environment: $env"
        #     echo "--------------------------"
        #   done


# APPROVAL STAGE (SHOW SUMMARY OF DIFF), USE PULL TO APPROVE
# BACKUP STAGE -> TO ARTEFACTS

  # sync:
  #   runs-on: self-hosted
  #   needs: diff
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Download Kong Patched Config
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: kong-plugined-and-patched.yaml
  #         path: ${{ env.DECK_API_NAME }}/api/deck-file/generated

  #     - name: Setup Environment Variables
  #       run: source ${{ env.DECK_API_NAME }}/api/env-vars/env-vars

  #     - name: Diff Kong Config
  #       run: |
  #         source $DECK_API_NAME/api/env-vars/env-vars
  #         deck gateway sync $DECK_API_NAME/api/deck-file/generated/kong-plugined-and-patched.yaml common/plugin-templates/opentelemetry.yaml --konnect-addr $KONNECT_ADDR --konnect-control-plane-name "$KONNECT_CONTROL_PLANE_NAME" --konnect-token $KONNECT_TOKEN --select-tag $DECK_API_NAME --select-tag $DECK_OWNER

# TEST STAGE
# ROLLBACK STAGE

  # Optional Dump and Dump API jobs
  # dump:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #
  #     - name: Dump Kong Data
  #       run: |
  #         export DATETIME=$(date +"%Y%m%d%H%M%S")
  #         deck gateway dump \
  #           --headers Kong-Admin-Token:2906rmoPLnrX9C9EoO7T \
  #           --kong-addr https://kong-admin-api-$DECK_KONG_DEPLOYMENT.kong-air.pve-1.schenkeveld.io \
  #           --yes \
  #           -o backups/kong-full-$DATETIME.yaml
  #
  # dump_api:
  #   runs-on: self-hosted
  #   if: ${{ github.event_name == 'push' }} # Trigger manually or on push
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #
  #     - name: Dump Kong API Data
  #       run: |
  #         export DATETIME=$(date +"%Y%m%d%H%M%S")
  #         deck gateway dump \
  #           --headers Kong-Admin-Token:2906rmoPLnrX9C9EoO7T \
  #           --kong-addr https://kong-admin-api-$DECK_KONG_DEPLOYMENT.kong-air.pve-1.schenkeveld.io \
  #           --select-tag $DECK_API_NAME \
  #           --yes \
  #           -o $DECK_API_NAME/api/deck-file/dumped/kong-$DATETIME.yaml
